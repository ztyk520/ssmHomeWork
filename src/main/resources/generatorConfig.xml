<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--
    targetRuntime: 执行生成的逆向工程的版本
           1. MyBatis3Simple: 生成基本的CRUD（清新简洁版）
           2. MyBatis3: 生成带条件的CRUD（奢华尊享版）
    -->
    <context id="DB2Tables" targetRuntime="MyBatis3Simple">
        <!-- 数据库的连接信息 -->
        <!--        这一块没什么好说的，非常熟悉-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/blog?serverTimezone=UTC"
                        userId="root"
                        password="root">
            <property name="nullCatalogMeansCurrent" value="true"></property>
        </jdbcConnection>
        <!-- javaBean的生成策略-->
        <!--        targetPackage表示生成的包名，targetProject表示生成的包是放在哪, " . " 表示当前目录，生成在src的main中的java中-->
        <javaModelGenerator targetPackage="com.yk.entity" targetProject=".\src\main\java">
            <!--            这个enableSubPackages表示生成子包，value为true表示之前的包名中的 . 可以是生成子包，如果是false，那些点不会起作用就是包名中的点-->
            <property name="enableSubPackages" value="true" />
            <!--            trimStrings 为true 表示把表中字段前后的空格去掉来生成实体类中的属性-->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!-- SQL映射文件的生成策略 -->
        <!--        这前面几个标签和上面都是类似的就不解释了-->
        <sqlMapGenerator targetPackage="com.yk.mapper"
                         targetProject=".\src\main\resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!-- Mapper接口的生成策略 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.yk.mapper" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>
        <!-- 逆向分析的表 -->
        <!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName -->
        <!-- domainObjectName属性指定生成出来的实体类的类名，它指定完后，无论是相关的mapper接口还是映射文件都是这个名字+Mapper -->
        <table tableName="article" domainObjectName="Article">
            <property name="useActualColumnNames" value="true"/>
        </table>
        <table tableName="user" domainObjectName="User">
            <property name="useActualColumnNames" value="true"/>
        </table>
    </context>
</generatorConfiguration>